type TaskStatus {
  value: ID!
  label: String!
}

type Task {
  id: ObjectID!
  userId: ObjectID!
  title: String!
  description: String!
  status: String!
  createdAt: String!
  updatedAt: String!
  user: User!
}

enum SortDirection {
  """
  Sort the list in ascending order
  """
  ASC
  """
  Sort the list in descending order
  """
  DESC
}

enum SortField {
  """
  Sort the list by the title
  """
  TITLE
  """
  Sort the list by the status
  """
  STATUS
  """
  Sort the list by the created date
  """
  CREATED_AT
  """
  Sort the list by the updated date
  """
  UPDATED_AT
}

input TaskSort {
  """
  The field to sort the task list
  """
  field: SortField!
  """
  The direction to sort the task list
  """
  dir: SortDirection!
}

input TaskFilter {
  """
  The search query for the task list
  """
  search: String!
  """
  Filter the task list by the status
  """
  status: ID!
}

input TaskParams {
  """
  The page number of the task list
  """
  page: Int
  """
  The limit of the task list
  """
  limit: Int
  """
  The filter of the task list
  """
  filter: TaskFilter!
  """
  The sort of the task list
  """
  sort: TaskSort
}

type Metadata {
  """
  The pagination metadata of the task result
  """
  pagination: Pagination!
}

type TaskList {
  """
  The list of tasks
  """
  result: [Task]
  """
  The pagination metadata of the tasks result
  """
  metadata: Metadata!
}

extend type Query {
  tasks(input: TaskParams): TaskList @auth
  task(id: ID!): Task @auth
  taskStatuses: [TaskStatus!]! @auth
  cloneTasks: Boolean! @auth
  clearTasks: Boolean! @auth
}

input CreateTaskInput {
  title: String!
  description: String!
  status: ID!
}

extend type Mutation {
  createTask(input: CreateTaskInput!): Task @auth
  updateTask(id: ID!, input: CreateTaskInput!): Task @auth
  deleteTask(id: ID!): Task @auth
}
